---
description: 
globs: 
alwaysApply: false
---
{
  "openapi": "3.0.1",
  "info": {
    "title": "EposNow Stocks",
    "version": "v4"
  },
  "paths": {
    "/api/v4/Inventory/stocks": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get paged inventory stocks with pagination metadata and links.",
        "description": "Use this method to get paginated inventory stocks.",
        "parameters": [
          {
            "name": "LocationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "CategoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "SupplierId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "BrandId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "StockWarning",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "SellOnTill",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "OnOrder",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "TaxExempt",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "SortingField",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "SortingType",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryStockResponsePagedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryStockResponsePagedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryStockResponsePagedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create new inventory stocks.",
        "description": "Use this method to post new inventory stocks.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateNewInventoryStocksRequest"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateNewInventoryStocksRequest"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateNewInventoryStocksRequest"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateNewInventoryStocksRequest"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateNewInventoryStocksRequest"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateNewInventoryStocksRequest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateNewInventoryStocksRequest"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/Inventory/stocktakes": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create inventory stocktake.",
        "description": "Use this method to post a new inventory stocktake.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStocktakeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStocktakeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStocktakeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStocktakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryStocktakeRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryStocktakeRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryStocktakeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/Inventory/{productId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Product Stock",
        "description": "Use this method to get stock information from a specific product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryProductStockPagedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryProductStockPagedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryProductStockPagedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/Inventory/{productId}/Update": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Update product stock stock",
        "description": "Use this method to update product stock",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryUpdateStockRequest"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryUpdateStockRequest"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryUpdateStockRequest"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryUpdateStockRequest"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/Inventory/{productId}/DisableTracking": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Disable stock tracking",
        "description": "Use this method to disable stock tracking for a specific product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStockRemoveRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStockRemoveRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStockRemoveRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryStockRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock": {
      "get": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Get all product stocks.",
        "description": "Use this method to get multiple product stocks.\r\n            - Supports pagination via <strong>page</strong> parameter. 200 response items per page.\r\n            - Not providing <strong>page</strong> will return items for page 1.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStock"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStock"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStock"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/{stockId}": {
      "get": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Get ProductStock by StockId.",
        "description": "Use this method to get specific stock information.",
        "parameters": [
          {
            "name": "stockId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/Product/{productId}": {
      "get": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Get ProductStocks for Product.",
        "description": "Use this method to get all stocks for a product.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/Location/{locationId}": {
      "get": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Get ProductStocks for Location",
        "description": "Use this method to get all product stocks in a location.",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/Product/{productId}/Location/{locationId}": {
      "get": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Get Stocks for a Product in a Location",
        "description": "Use this method to get stock for a product in a location.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/Add": {
      "post": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Add product stock",
        "description": "Use this method to add a stock for a product.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockAddRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockAddRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockAddRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockAddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/Update": {
      "post": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Import stock for multiple products",
        "description": "Use this method to import multiple product stocks at once.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductStockRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductStockRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductStockRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductStockRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/Remove": {
      "post": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Remove product stock",
        "description": "Use this method to remove a stock for a product.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockRemoveRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockRemoveRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockRemoveRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStock/RemoveBulkStock": {
      "post": {
        "tags": [
          "ProductStock"
        ],
        "summary": "Remove stock from multiple products at multiple locations",
        "description": "Use this method if you want to remove stock from multiple locations in a single request.",
        "parameters": [
          {
            "name": "isBulkImport",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "description": "",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkProductStockRemoveRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkProductStockRemoveRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkProductStockRemoveRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkProductStockRemoveRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IProductStock"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStockEvent/Get": {
      "get": {
        "tags": [
          "ProductStockEvent"
        ],
        "summary": "Gets all product stock events within an id interval.",
        "parameters": [
          {
            "name": "fromId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          },
          {
            "name": "toId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockEvent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStockEvent": {
      "get": {
        "tags": [
          "ProductStockEvent"
        ],
        "summary": "Gets all product stock events within an id interval.",
        "parameters": [
          {
            "name": "fromId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          },
          {
            "name": "toId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockEvent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/ProductStockEvent/List": {
      "get": {
        "tags": [
          "ProductStockEvent"
        ],
        "summary": "Get ProductStockEvent objects for given id list.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of product stock event id.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "List of product stock event id.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/PurchaseOrder/GetByDate": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "supplierId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "toLocation",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "statusId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "locationAreaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "detailedGRN",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/PurchaseOrder/{id}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "detailedGRN",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTake": {
      "get": {
        "tags": [
          "StockTake"
        ],
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StockTake"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTake"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTake"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTransfer": {
      "get": {
        "tags": [
          "StockTransfer"
        ],
        "summary": "Get all Stock Transfer",
        "description": "Use this method to get all stock transfers\r\n- Supports pagination via <strong>page</strong> parameter. 200 response items per page.\r\n- Not providing <strong>page</strong> will return items for page 1.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTransfer/{id}": {
      "get": {
        "tags": [
          "StockTransfer"
        ],
        "summary": "Get StockMovement by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransfer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransfer"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransfer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTransfer/Send": {
      "post": {
        "tags": [
          "StockTransfer"
        ],
        "summary": "Create Stock Transfers",
        "description": "Use this method to create stock transfer.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTransfer/Receive": {
      "put": {
        "tags": [
          "StockTransfer"
        ],
        "summary": "Update Stock Transfers",
        "description": "Use this method to receive stock transfer.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiveStockRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiveStockRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiveStockRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiveStockRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTransfer/SendReceive": {
      "post": {
        "tags": [
          "StockTransfer"
        ],
        "summary": "Create Stock Transfers and receive them",
        "description": "Use this method to create stock transfer and receive. This method allows you to send and receive stock transfers in one call.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendStockRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransfer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTransferReason": {
      "get": {
        "tags": [
          "StockTransferReason"
        ],
        "summary": "Get all StockMovementReasons",
        "description": "Use this method to get all stock movement reasons\r\n- Supports pagination via <strong>page</strong> parameter. 200 response items per page.\r\n- Not providing <strong>page</strong> will return items for page 1.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "StockTransferReason"
        ],
        "summary": "Create StockMovementReasons",
        "description": "Use this method to create stock movement reasons.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "StockMovementReasons created OK.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "StockTransferReason"
        ],
        "summary": "Delete StockMovementReasons",
        "description": "Use this method to delete stock movement reasons.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/StockTransferReason/{id}": {
      "get": {
        "tags": [
          "StockTransferReason"
        ],
        "summary": "Get StockMovementReason by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransferReason"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransferReason"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransferReason"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "StockTransferReason"
        ],
        "summary": "Update StockMovementReasons",
        "description": "Use this method to update stock movement reasons.\r\n            - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,\r\n            optional parameters that are not provided will be set to their default value.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransferReasonUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransferReason"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/Supplier": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get all Suppliers",
        "description": "Use this method to get all suppliers.\r\n- Supports pagination via <strong>page</strong> parameter. 200 response items per page.\r\n- Not providing <strong>page</strong> will return items for page 1.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Supplier"
        ],
        "summary": "Create Suppliers",
        "description": "Use this method to create suppliers.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Supplier"
        ],
        "summary": "Delete Suppliers",
        "description": "Use this method to delete suppliers.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/Supplier/{id}": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get a Supplier by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Supplier"
        ],
        "summary": "Update Suppliers",
        "description": "Use this method to update suppliers.\r\n            - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,\r\n            optional parameters that are not provided will be set to their default value.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/Supplier/Stats": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get referenced Supplier statistics",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierCount"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierCount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierCount"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/SupplierReferenceCode": {
      "get": {
        "tags": [
          "SupplierReferenceCode"
        ],
        "summary": "Get all SupplierReferenceCodes",
        "description": "Use this method to get all the supplier reference codes.\r\n            - Supports pagination via <strong>page</strong> parameter. 200 response items per page.\r\n            - Not providing <strong>page</strong> will return items for page 1.\r\n            Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity. \r\n            Reference code methods always deal with the Reference codes registered with the authorizing token.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "SupplierReferenceCode"
        ],
        "summary": "Create SupplierReferenceCodes",
        "description": "Use this method to create SupplierReferenceCodes.\r\n            - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity. \r\n            - Reference codes are only registered against your Auth Token.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeCreateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SupplierReferenceCode"
        ],
        "summary": "Delete SupplierReferenceCodes",
        "description": "Use this method to delete SupplierReferenceCodes.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/SupplierReferenceCode/{id}": {
      "get": {
        "tags": [
          "SupplierReferenceCode"
        ],
        "summary": "Get a SupplierReferenceCode by id",
        "description": "Use this method to get a supplier reference code.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierReferenceCode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierReferenceCode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "SupplierReferenceCode"
        ],
        "summary": "Update SupplierReferenceCodes",
        "description": "Use this method to update SupplierReferenceCodes.   \r\n            - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,\r\n            optional parameters that are not provided will be set to their default value.\r\n            - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity. \r\n            - Reference codes are only registered against your Auth Token.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierReferenceCodeUpdateRequest"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierReferenceCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/api/v4/SupplierReferenceCode/Supplier/{id}": {
      "get": {
        "tags": [
          "SupplierReferenceCode"
        ],
        "summary": "Get a SupplierReferenceCode by supplier id",
        "description": "Use this method to get a supplier reference code by supplier id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierReferenceCode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierReferenceCode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "TaxGroupRate": {
        "type": "object",
        "properties": {
          "taxGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "taxRateId": {
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "taxCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "taxRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxGroupRate"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductPricing": {
        "type": "object",
        "properties": {
          "isPriceIncludingTax": {
            "type": "boolean"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "taxGroup": {
            "$ref": "#/components/schemas/TaxGroup"
          },
          "priceIncTax": {
            "type": "number",
            "format": "double"
          },
          "priceExTax": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "InventoryStockResponse": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "productType": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "isCostPriceIncTax": {
            "type": "boolean"
          },
          "costPriceTaxGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPrice": {
            "type": "number",
            "format": "double"
          },
          "costPricing": {
            "$ref": "#/components/schemas/ProductPricing"
          },
          "costPriceIncTax": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "costPriceExcTax": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "costPriceTaxGroupName": {
            "type": "string",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "format": "double"
          },
          "salePricing": {
            "$ref": "#/components/schemas/ProductPricing"
          },
          "isSalePriceIncTax": {
            "type": "boolean"
          },
          "salePriceIncTax": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "salePriceExcTax": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "salePriceTaxGroupName": {
            "type": "string",
            "nullable": true
          },
          "salePriceTaxGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "currentStock": {
            "type": "number",
            "format": "double"
          },
          "supplierId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "supplierName": {
            "type": "string",
            "nullable": true
          },
          "barcode": {
            "type": "string",
            "nullable": true
          },
          "orderCode": {
            "type": "string",
            "nullable": true
          },
          "onOrder": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "brandId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "brandName": {
            "type": "string",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "minimumStock": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maximumStock": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          },
          "stockWarning": {
            "type": "boolean"
          },
          "sellOnTill": {
            "type": "boolean"
          },
          "costPriceMeasurementSchemeItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPriceMeasurementUnitVolume": {
            "type": "string",
            "nullable": true
          },
          "salePriceMeasurementSchemeItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salePriceMeasurementUnitVolume": {
            "type": "string",
            "nullable": true
          },
          "volumeOfSale": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "unitOfSale": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaginationMetadata": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PaginationLinks": {
        "type": "object",
        "properties": {
          "baseURL": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "firstPage": {
            "type": "string",
            "nullable": true
          },
          "lastPage": {
            "type": "string",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryStockResponsePagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryStockResponse"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "NewInventoryStock": {
        "required": [
          "currentStock",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "currentStock": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "maximumStock": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimumStock": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "alerts": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateNewInventoryStocksRequest": {
        "required": [
          "newStocks",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "newStocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewInventoryStock"
            }
          }
        },
        "additionalProperties": false
      },
      "InventoryStockChangeRequest": {
        "required": [
          "actualStock",
          "costPrice",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "actualStock": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "costPrice": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "minimumStock": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maximumStock": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "reasonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stockId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stockDifference": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryStocktakeRequest": {
        "required": [
          "locationId",
          "staffId",
          "stockChanges"
        ],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "stockChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryStockChangeRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "InventoryProductStock": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "minStock": {
            "type": "integer",
            "format": "int32"
          },
          "maxStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minVolume": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxVolume": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "alerts": {
            "type": "boolean"
          },
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "factor": {
            "type": "integer",
            "format": "int32"
          },
          "volumeOfSale": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "InventoryProductStockPagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryProductStock"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "InventoryUpdateStockRequest": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "currentStock": {
            "type": "integer",
            "format": "int32"
          },
          "minimumStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximumStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "alerts": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryStockRemoveRequest": {
        "required": [
          "locationIdsToRemove",
          "staffId"
        ],
        "type": "object",
        "properties": {
          "locationIdsToRemove": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "staffId": {
            "type": "integer",
            "format": "int32"
          },
          "reasonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StockBatchMeasurementDetails": {
        "type": "object",
        "properties": {
          "costPriceMeasurementSchemeItemId": {
            "type": "integer",
            "format": "int32"
          },
          "costPriceMeasurementVolume": {
            "type": "integer",
            "format": "int32"
          },
          "costPriceUnitFactor": {
            "type": "integer",
            "format": "int32"
          },
          "costPriceUnit": {
            "type": "string",
            "nullable": true
          },
          "stockMeasurementSchemeItemId": {
            "type": "integer",
            "format": "int32"
          },
          "stockUnit": {
            "type": "string",
            "nullable": true
          },
          "stockFactor": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IProductStockBatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "productStockId": {
            "type": "integer",
            "format": "int32"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "currentStock": {
            "type": "integer",
            "format": "int32"
          },
          "currentVolume": {
            "type": "integer",
            "format": "int32"
          },
          "costPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "supplierId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "measurementDetails": {
            "$ref": "#/components/schemas/StockBatchMeasurementDetails"
          }
        },
        "additionalProperties": false
      },
      "ProductStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "minStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "alerts": {
            "type": "boolean"
          },
          "minimumOrderAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "multipleOrderAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "productStockBatches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IProductStockBatch"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IProductStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "minStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "alerts": {
            "type": "boolean"
          },
          "minimumOrderAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "multipleOrderAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "productStockBatches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IProductStockBatch"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StockBatchMeasurementDetailsRequest": {
        "type": "object",
        "properties": {
          "costPriceMeasurementSchemeItemId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPriceMeasurementUnitVolume": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductStockAddRequest": {
        "required": [
          "changeInStock",
          "locationId",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "changeInStock": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "changeInVolume": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "costPrice": {
            "pattern": "^(-)?(\\d){1,12}(\\.\\d{0,5})?$",
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "supplierId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "measurementDetails": {
            "$ref": "#/components/schemas/StockBatchMeasurementDetailsRequest"
          }
        },
        "additionalProperties": false
      },
      "ProductStockRequest": {
        "required": [
          "locationId",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "changeInStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "changeInVolume": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxStock": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "alerts": {
            "type": "boolean",
            "nullable": true
          },
          "costPrice": {
            "pattern": "^(-)?(\\d){1,12}(\\.\\d{0,5})?$",
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "supplierId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "measurementDetails": {
            "$ref": "#/components/schemas/StockBatchMeasurementDetailsRequest"
          }
        },
        "additionalProperties": false
      },
      "ProductStockRemoveRequest": {
        "required": [
          "changeInStock",
          "locationId",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "changeInStock": {
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer",
            "format": "int32"
          },
          "changeInVolume": {
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer",
            "format": "int32"
          },
          "costPrice": {
            "type": "number",
            "format": "double"
          },
          "costPriceMeasurementSchemeItemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPriceMeasurementUnitVolume": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkProductStockRemoveRequest": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "productStockRemoveList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductStockRemoveRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductStockEvent": {
        "type": "object",
        "properties": {
          "productStockEventID": {
            "type": "integer",
            "format": "int32"
          },
          "quantityDelta": {
            "type": "integer",
            "format": "int32"
          },
          "volumeDelta": {
            "type": "integer",
            "format": "int32"
          },
          "productID": {
            "type": "integer",
            "format": "int32"
          },
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "productStockEventSourceID": {
            "type": "integer",
            "format": "int32"
          },
          "reasonID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GoodsReceiptStockItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "productName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "orderedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "quantityOrdered": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "quantityReceived": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "costPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GoodsReceiptNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "goods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoodsReceiptStockItem"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "purchaseOrderId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "productId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "qtyOrdered": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "qtyReceived": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "costPrice": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "orderRef": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "staffId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "supplierId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "locationId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "warehouseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "note": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "orderedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "goodsReceiptNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoodsReceiptNote"
            },
            "nullable": true,
            "readOnly": true
          },
          "goodsReceiptNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItem"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StockTakeItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "stockId": {
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volume": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StockTake": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "deviceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "toLocation": {
            "type": "integer",
            "format": "int32"
          },
          "toLocationName": {
            "type": "string",
            "nullable": true
          },
          "staffId": {
            "type": "integer",
            "format": "int32"
          },
          "staffName": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "referenceNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockTakeItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IStockTransferItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "stockTransferId": {
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "quantitySent": {
            "type": "integer",
            "format": "int32"
          },
          "quantityReceived": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantityNewfrom": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantityNewTo": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeSent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeReceived": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeNewFrom": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeNewTo": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StockTransfer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "transferNumber": {
            "type": "integer",
            "format": "int32"
          },
          "fromLocation": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "toLocation": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "staffSent": {
            "type": "integer",
            "format": "int32"
          },
          "staffReceived": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stockTransferReasonId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "stockTransferItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStockTransferItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StockTransferItemSent": {
        "required": [
          "productId",
          "quantitySent"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "quantitySent": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "quantityReceived": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantityNewFrom": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantityNewTo": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeSent": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeReceived": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeNewFrom": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeNewTo": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPrice": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stockId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPriceMeasurementSchemeItemId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPriceMeasurementUnitVolume": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendStockRequest": {
        "required": [
          "staffId",
          "stockTransferItems",
          "stockTransferReasonId",
          "toLocation"
        ],
        "type": "object",
        "properties": {
          "transferNumber": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fromLocation": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "toLocation": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "staffId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "dateSent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateReceived": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "stockTransferReasonId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "stockTransferItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockTransferItemSent"
            }
          }
        },
        "additionalProperties": false
      },
      "StockTransferItemReceived": {
        "required": [
          "productId",
          "quantityReceived"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "quantitySent": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantityReceived": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "quantityNewFrom": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantityNewTo": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeSent": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeReceived": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeNewFrom": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "volumeNewTo": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stockId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPriceMeasurementSchemeItemId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "costPriceMeasurementUnitVolume": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReceiveStockRequest": {
        "required": [
          "id",
          "staffId",
          "stockTransferItemsReceived"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "dateReceived": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "staffId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "notes": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "stockTransferItemsReceived": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockTransferItemReceived"
            }
          }
        },
        "additionalProperties": false
      },
      "StockTransferReason": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StockTransferReasonCreateRequest": {
        "required": [
          "reason"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DeleteRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StockTransferReasonUpdateRequest": {
        "required": [
          "id",
          "reason"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Supplier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "town": {
            "type": "string",
            "nullable": true
          },
          "county": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "contactNumber2": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "referenceCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SupplierCreateRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "town": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "county": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "maxLength": 15,
            "minLength": 0,
            "pattern": "^[0-9]*$",
            "type": "string",
            "nullable": true
          },
          "contactNumber2": {
            "maxLength": 15,
            "minLength": 0,
            "pattern": "^[0-9]*$",
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "type": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "referenceCode": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SupplierUpdateRequest": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "town": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "county": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "maxLength": 15,
            "minLength": 0,
            "pattern": "^[0-9]*$",
            "type": "string",
            "nullable": true
          },
          "contactNumber2": {
            "maxLength": 15,
            "minLength": 0,
            "pattern": "^[0-9]*$",
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "type": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SupplierCount": {
        "type": "object",
        "properties": {
          "totalSuppliers": {
            "type": "integer",
            "format": "int32"
          },
          "totalSuppliersWithReferenceCodes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SupplierReferenceCode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "supplierId": {
            "type": "integer",
            "format": "int32"
          },
          "appId": {
            "type": "integer",
            "format": "int32"
          },
          "referenceCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SupplierReferenceCodeCreateRequest": {
        "required": [
          "referenceCode",
          "supplierId"
        ],
        "type": "object",
        "properties": {
          "supplierId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "referenceCode": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SupplierReferenceCodeUpdateRequest": {
        "required": [
          "id",
          "referenceCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "referenceCode": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Basic": {
        "type": "apiKey",
        "description": "The Epos Now API uses Location specific API keys to authenticate requests. You can view and manage your API keys from the Epos Now Back Office under the API Device located in the App Store.\r\n\r\nMake sure to read the documentation for each endpoint as some APIs are location specific, meaning that endpoints will only return information specific to the Location the API Device is associated with.\r\n\r\nAll API requests must be made over HTTPS. Requests made over plain HTTP will fail. API requests without authentication will also fail.\r\n\r\nEpos Now APIs use Basic access authentication. When authenticating construct your key as follows - **Basic {{API_KEY}}**.",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}