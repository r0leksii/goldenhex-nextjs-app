/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v4/Inventory/stocks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get paged inventory stocks with pagination metadata and links.
     * @description Use this method to get paginated inventory stocks.
     */
    get: {
      parameters: {
        query: {
          LocationId: number;
          Search?: string | null;
          CategoryId?: number | null;
          SupplierId?: number | null;
          BrandId?: number | null;
          StockWarning?: boolean | null;
          SellOnTill?: boolean | null;
          OnOrder?: boolean | null;
          TaxExempt?: boolean | null;
          SortingField?: string | null;
          SortingType?: string | null;
          Page?: number;
          Limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["InventoryStockResponsePagedResponse"];
            "application/json": components["schemas"]["InventoryStockResponsePagedResponse"];
            "text/json": components["schemas"]["InventoryStockResponsePagedResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    put?: never;
    /**
     * Create new inventory stocks.
     * @description Use this method to post new inventory stocks.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["CreateNewInventoryStocksRequest"][]
            | null;
          "application/json":
            | components["schemas"]["CreateNewInventoryStocksRequest"][]
            | null;
          "text/json":
            | components["schemas"]["CreateNewInventoryStocksRequest"][]
            | null;
          "application/*+json":
            | components["schemas"]["CreateNewInventoryStocksRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["CreateNewInventoryStocksRequest"][];
            "application/json": components["schemas"]["CreateNewInventoryStocksRequest"][];
            "text/json": components["schemas"]["CreateNewInventoryStocksRequest"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Client Error */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/Inventory/stocktakes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create inventory stocktake.
     * @description Use this method to post a new inventory stocktake.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["InventoryStocktakeRequest"];
          "application/json": components["schemas"]["InventoryStocktakeRequest"];
          "text/json": components["schemas"]["InventoryStocktakeRequest"];
          "application/*+json": components["schemas"]["InventoryStocktakeRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["InventoryStocktakeRequest"];
            "application/json": components["schemas"]["InventoryStocktakeRequest"];
            "text/json": components["schemas"]["InventoryStocktakeRequest"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Client Error */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/Inventory/{productId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Product Stock
     * @description Use this method to get stock information from a specific product
     */
    get: {
      parameters: {
        query?: {
          Page?: number;
          Limit?: number;
        };
        header?: never;
        path: {
          productId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["InventoryProductStockPagedResponse"];
            "application/json": components["schemas"]["InventoryProductStockPagedResponse"];
            "text/json": components["schemas"]["InventoryProductStockPagedResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/Inventory/{productId}/Update": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update product stock stock
     * @description Use this method to update product stock
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          productId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["InventoryUpdateStockRequest"][]
            | null;
          "application/json":
            | components["schemas"]["InventoryUpdateStockRequest"][]
            | null;
          "text/json":
            | components["schemas"]["InventoryUpdateStockRequest"][]
            | null;
          "application/*+json":
            | components["schemas"]["InventoryUpdateStockRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/Inventory/{productId}/DisableTracking": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Disable stock tracking
     * @description Use this method to disable stock tracking for a specific product
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          productId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["InventoryStockRemoveRequest"];
          "application/json": components["schemas"]["InventoryStockRemoveRequest"];
          "text/json": components["schemas"]["InventoryStockRemoveRequest"];
          "application/*+json": components["schemas"]["InventoryStockRemoveRequest"];
        };
      };
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all product stocks.
     * @description Use this method to get multiple product stocks.
     *                 - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *                 - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProductStock"][];
            "application/json": components["schemas"]["ProductStock"][];
            "text/json": components["schemas"]["ProductStock"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/{stockId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get ProductStock by StockId.
     * @description Use this method to get specific stock information.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          stockId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["IProductStock"];
            "application/json": components["schemas"]["IProductStock"];
            "text/json": components["schemas"]["IProductStock"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/Product/{productId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get ProductStocks for Product.
     * @description Use this method to get all stocks for a product.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        header?: never;
        path: {
          productId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["IProductStock"][];
            "application/json": components["schemas"]["IProductStock"][];
            "text/json": components["schemas"]["IProductStock"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/Location/{locationId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get ProductStocks for Location
     * @description Use this method to get all product stocks in a location.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        header?: never;
        path: {
          locationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["IProductStock"][];
            "application/json": components["schemas"]["IProductStock"][];
            "text/json": components["schemas"]["IProductStock"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/Product/{productId}/Location/{locationId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Stocks for a Product in a Location
     * @description Use this method to get stock for a product in a location.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          productId: number;
          locationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["IProductStock"];
            "application/json": components["schemas"]["IProductStock"];
            "text/json": components["schemas"]["IProductStock"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/Add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add product stock
     * @description Use this method to add a stock for a product.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ProductStockAddRequest"];
          "application/json": components["schemas"]["ProductStockAddRequest"];
          "text/json": components["schemas"]["ProductStockAddRequest"];
          "application/*+json": components["schemas"]["ProductStockAddRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["IProductStock"];
            "application/json": components["schemas"]["IProductStock"];
            "text/json": components["schemas"]["IProductStock"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/Update": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Import stock for multiple products
     * @description Use this method to import multiple product stocks at once.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductStockRequest"][]
            | null;
          "application/json":
            | components["schemas"]["ProductStockRequest"][]
            | null;
          "text/json": components["schemas"]["ProductStockRequest"][] | null;
          "application/*+json":
            | components["schemas"]["ProductStockRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/Remove": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Remove product stock
     * @description Use this method to remove a stock for a product.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ProductStockRemoveRequest"];
          "application/json": components["schemas"]["ProductStockRemoveRequest"];
          "text/json": components["schemas"]["ProductStockRemoveRequest"];
          "application/*+json": components["schemas"]["ProductStockRemoveRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["IProductStock"];
            "application/json": components["schemas"]["IProductStock"];
            "text/json": components["schemas"]["IProductStock"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStock/RemoveBulkStock": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Remove stock from multiple products at multiple locations
     * @description Use this method if you want to remove stock from multiple locations in a single request.
     */
    post: {
      parameters: {
        query?: {
          isBulkImport?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["BulkProductStockRemoveRequest"][]
            | null;
          "application/json":
            | components["schemas"]["BulkProductStockRemoveRequest"][]
            | null;
          "text/json":
            | components["schemas"]["BulkProductStockRemoveRequest"][]
            | null;
          "application/*+json":
            | components["schemas"]["BulkProductStockRemoveRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["IProductStock"][];
            "application/json": components["schemas"]["IProductStock"][];
            "text/json": components["schemas"]["IProductStock"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStockEvent/Get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Gets all product stock events within an id interval. */
    get: {
      parameters: {
        query?: {
          fromId?: number;
          toId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProductStockEvent"];
            "application/json": components["schemas"]["ProductStockEvent"];
            "text/json": components["schemas"]["ProductStockEvent"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStockEvent": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Gets all product stock events within an id interval. */
    get: {
      parameters: {
        query?: {
          fromId?: number;
          toId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProductStockEvent"];
            "application/json": components["schemas"]["ProductStockEvent"];
            "text/json": components["schemas"]["ProductStockEvent"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/ProductStockEvent/List": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get ProductStockEvent objects for given id list. */
    get: {
      parameters: {
        query?: {
          /** @description List of product stock event id. */
          ids?: number[] | null;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": Record<string, never>[];
            "application/json": Record<string, never>[];
            "text/json": Record<string, never>[];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/PurchaseOrder/GetByDate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          fromDate?: string;
          toDate?: string;
          supplierId?: number | null;
          toLocation?: number | null;
          statusId?: number | null;
          locationAreaId?: number | null;
          pageNumber?: number;
          detailedGRN?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["PurchaseOrder"][];
            "application/json": components["schemas"]["PurchaseOrder"][];
            "text/json": components["schemas"]["PurchaseOrder"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/PurchaseOrder/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          detailedGRN?: boolean;
        };
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["PurchaseOrder"];
            "application/json": components["schemas"]["PurchaseOrder"];
            "text/json": components["schemas"]["PurchaseOrder"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTake": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          fromDate?: string;
          toDate?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTake"];
            "application/json": components["schemas"]["StockTake"];
            "text/json": components["schemas"]["StockTake"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTransfer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all Stock Transfer
     * @description Use this method to get all stock transfers
     *     - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *     - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransfer"][];
            "application/json": components["schemas"]["StockTransfer"][];
            "text/json": components["schemas"]["StockTransfer"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTransfer/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get StockMovement by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransfer"];
            "application/json": components["schemas"]["StockTransfer"];
            "text/json": components["schemas"]["StockTransfer"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTransfer/Send": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Stock Transfers
     * @description Use this method to create stock transfer.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["SendStockRequest"];
          "application/json": components["schemas"]["SendStockRequest"];
          "text/json": components["schemas"]["SendStockRequest"];
          "application/*+json": components["schemas"]["SendStockRequest"];
        };
      };
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransfer"][];
            "application/json": components["schemas"]["StockTransfer"][];
            "text/json": components["schemas"]["StockTransfer"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTransfer/Receive": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update Stock Transfers
     * @description Use this method to receive stock transfer.
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ReceiveStockRequest"];
          "application/json": components["schemas"]["ReceiveStockRequest"];
          "text/json": components["schemas"]["ReceiveStockRequest"];
          "application/*+json": components["schemas"]["ReceiveStockRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransfer"][];
            "application/json": components["schemas"]["StockTransfer"][];
            "text/json": components["schemas"]["StockTransfer"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTransfer/SendReceive": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Stock Transfers and receive them
     * @description Use this method to create stock transfer and receive. This method allows you to send and receive stock transfers in one call.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["SendStockRequest"];
          "application/json": components["schemas"]["SendStockRequest"];
          "text/json": components["schemas"]["SendStockRequest"];
          "application/*+json": components["schemas"]["SendStockRequest"];
        };
      };
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransfer"][];
            "application/json": components["schemas"]["StockTransfer"][];
            "text/json": components["schemas"]["StockTransfer"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTransferReason": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all StockMovementReasons
     * @description Use this method to get all stock movement reasons
     *     - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *     - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransferReason"][];
            "application/json": components["schemas"]["StockTransferReason"][];
            "text/json": components["schemas"]["StockTransferReason"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create StockMovementReasons
     * @description Use this method to create stock movement reasons.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["StockTransferReasonCreateRequest"][]
            | null;
          "application/json":
            | components["schemas"]["StockTransferReasonCreateRequest"][]
            | null;
          "text/json":
            | components["schemas"]["StockTransferReasonCreateRequest"][]
            | null;
          "application/*+json":
            | components["schemas"]["StockTransferReasonCreateRequest"][]
            | null;
        };
      };
      responses: {
        /** @description StockMovementReasons created OK. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransferReason"][];
            "application/json": components["schemas"]["StockTransferReason"][];
            "text/json": components["schemas"]["StockTransferReason"][];
          };
        };
        /** @description Validation error. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Delete StockMovementReasons
     * @description Use this method to delete stock movement reasons.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null;
          "application/json": components["schemas"]["DeleteRequest"][] | null;
          "text/json": components["schemas"]["DeleteRequest"][] | null;
          "application/*+json": components["schemas"]["DeleteRequest"][] | null;
        };
      };
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/StockTransferReason/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get StockMovementReason by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransferReason"];
            "application/json": components["schemas"]["StockTransferReason"];
            "text/json": components["schemas"]["StockTransferReason"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update StockMovementReasons
     * @description Use this method to update stock movement reasons.
     *                 - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *                 optional parameters that are not provided will be set to their default value.
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["StockTransferReasonUpdateRequest"][]
            | null;
          "application/json":
            | components["schemas"]["StockTransferReasonUpdateRequest"][]
            | null;
          "text/json":
            | components["schemas"]["StockTransferReasonUpdateRequest"][]
            | null;
          "application/*+json":
            | components["schemas"]["StockTransferReasonUpdateRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["StockTransferReason"][];
            "application/json": components["schemas"]["StockTransferReason"][];
            "text/json": components["schemas"]["StockTransferReason"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/Supplier": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all Suppliers
     * @description Use this method to get all suppliers.
     *     - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *     - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["Supplier"][];
            "application/json": components["schemas"]["Supplier"][];
            "text/json": components["schemas"]["Supplier"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create Suppliers
     * @description Use this method to create suppliers.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["SupplierCreateRequest"][]
            | null;
          "application/json":
            | components["schemas"]["SupplierCreateRequest"][]
            | null;
          "text/json": components["schemas"]["SupplierCreateRequest"][] | null;
          "application/*+json":
            | components["schemas"]["SupplierCreateRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["Supplier"][];
            "application/json": components["schemas"]["Supplier"][];
            "text/json": components["schemas"]["Supplier"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Delete Suppliers
     * @description Use this method to delete suppliers.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null;
          "application/json": components["schemas"]["DeleteRequest"][] | null;
          "text/json": components["schemas"]["DeleteRequest"][] | null;
          "application/*+json": components["schemas"]["DeleteRequest"][] | null;
        };
      };
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/Supplier/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a Supplier by id. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["Supplier"];
            "application/json": components["schemas"]["Supplier"];
            "text/json": components["schemas"]["Supplier"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update Suppliers
     * @description Use this method to update suppliers.
     *                 - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *                 optional parameters that are not provided will be set to their default value.
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["SupplierUpdateRequest"][]
            | null;
          "application/json":
            | components["schemas"]["SupplierUpdateRequest"][]
            | null;
          "text/json": components["schemas"]["SupplierUpdateRequest"][] | null;
          "application/*+json":
            | components["schemas"]["SupplierUpdateRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["Supplier"][];
            "application/json": components["schemas"]["Supplier"][];
            "text/json": components["schemas"]["Supplier"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/Supplier/Stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get referenced Supplier statistics */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["SupplierCount"];
            "application/json": components["schemas"]["SupplierCount"];
            "text/json": components["schemas"]["SupplierCount"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/SupplierReferenceCode": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all SupplierReferenceCodes
     * @description Use this method to get all the supplier reference codes.
     *                 - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *                 - Not providing <strong>page</strong> will return items for page 1.
     *                 Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 Reference code methods always deal with the Reference codes registered with the authorizing token.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["SupplierReferenceCode"][];
            "application/json": components["schemas"]["SupplierReferenceCode"][];
            "text/json": components["schemas"]["SupplierReferenceCode"][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create SupplierReferenceCodes
     * @description Use this method to create SupplierReferenceCodes.
     *                 - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 - Reference codes are only registered against your Auth Token.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["SupplierReferenceCodeCreateRequest"][]
            | null;
          "application/json":
            | components["schemas"]["SupplierReferenceCodeCreateRequest"][]
            | null;
          "text/json":
            | components["schemas"]["SupplierReferenceCodeCreateRequest"][]
            | null;
          "application/*+json":
            | components["schemas"]["SupplierReferenceCodeCreateRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["SupplierReferenceCode"][];
            "application/json": components["schemas"]["SupplierReferenceCode"][];
            "text/json": components["schemas"]["SupplierReferenceCode"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Delete SupplierReferenceCodes
     * @description Use this method to delete SupplierReferenceCodes.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null;
          "application/json": components["schemas"]["DeleteRequest"][] | null;
          "text/json": components["schemas"]["DeleteRequest"][] | null;
          "application/*+json": components["schemas"]["DeleteRequest"][] | null;
        };
      };
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/SupplierReferenceCode/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a SupplierReferenceCode by id
     * @description Use this method to get a supplier reference code.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["SupplierReferenceCode"];
            "application/json": components["schemas"]["SupplierReferenceCode"];
            "text/json": components["schemas"]["SupplierReferenceCode"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update SupplierReferenceCodes
     * @description Use this method to update SupplierReferenceCodes.
     *                 - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *                 optional parameters that are not provided will be set to their default value.
     *                 - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 - Reference codes are only registered against your Auth Token.
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["SupplierReferenceCodeUpdateRequest"][]
            | null;
          "application/json":
            | components["schemas"]["SupplierReferenceCodeUpdateRequest"][]
            | null;
          "text/json":
            | components["schemas"]["SupplierReferenceCodeUpdateRequest"][]
            | null;
          "application/*+json":
            | components["schemas"]["SupplierReferenceCodeUpdateRequest"][]
            | null;
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["SupplierReferenceCode"][];
            "application/json": components["schemas"]["SupplierReferenceCode"][];
            "text/json": components["schemas"]["SupplierReferenceCode"][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v4/SupplierReferenceCode/Supplier/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a SupplierReferenceCode by supplier id
     * @description Use this method to get a supplier reference code by supplier id.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": components["schemas"]["SupplierReferenceCode"];
            "application/json": components["schemas"]["SupplierReferenceCode"];
            "text/json": components["schemas"]["SupplierReferenceCode"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
