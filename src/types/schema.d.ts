/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v4/Catalogue/products": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get paged Products and Metadata
     * @description Use this method to get all products with metadata.
     *     - Supports pagination via <strong>page</strong> parameter. Default 50 products per page.
     *     - Not providing <strong>page</strong> will return products for page 1.
     *     - Not providing <strong>archived</strong> will return non archived products.
     *     - Providing <strong>archived</strong> with value 'true' will return only archived products.
     */
    get: {
      parameters: {
        query?: {
          Search?: string | null
          CategoryId?: number | null
          TaxRateGroupId?: number | null
          EatOutTaxRateId?: number | null
          ContainerFeeId?: number | null
          ButtonColourId?: number | null
          BrandId?: number | null
          SupplierId?: number | null
          VariantId?: number | null
          ColourId?: number | null
          Type?: number | null
          VariablePrice?: boolean | null
          TaxExempt?: boolean | null
          ExcludeFromPointGain?: boolean | null
          SellOnTill?: boolean | null
          SellOnWeb?: boolean | null
          SortingField?: string | null
          SortingType?: string | null
          Archived?: boolean
          Page?: number
          Limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["IProductGridPagedResponse"]
            "application/json": components["schemas"]["IProductGridPagedResponse"]
            "text/json": components["schemas"]["IProductGridPagedResponse"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Create Products
     * @description Use this method to create products.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductGridRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductGridRequest"][]
            | null
          "text/json": components["schemas"]["ProductGridRequest"][] | null
          "application/*+json":
            | components["schemas"]["ProductGridRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["IProductGrid"]
            "application/json": components["schemas"]["IProductGrid"]
            "text/json": components["schemas"]["IProductGrid"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Catalogue/products/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete Product */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
      }
    }
    options?: never
    head?: never
    /**
     * Patch Product
     * @description Use this method to patch a product.
     */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["Operation"][]
            | null
          "application/json": components["schemas"]["Operation"][] | null
          "text/json": components["schemas"]["Operation"][] | null
          "application/*+json": components["schemas"]["Operation"][] | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["IProductGrid"]
            "application/json": components["schemas"]["IProductGrid"]
            "text/json": components["schemas"]["IProductGrid"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
      }
    }
    trace?: never
  }
  "/api/v4/Catalogue/products/{id}/undelete": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Undelete Product */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Catalogue/containerfees": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get paged Container Fees
     * @description Use this method to get all container fees.
     *     - Supports pagination via <strong>page</strong> parameter. Default 50 container fees per page.
     *     - Not providing <strong>page</strong> will return container fees for page 1.
     */
    get: {
      parameters: {
        query?: {
          SortingField?: string | null
          SortingType?: string | null
          Page?: number
          Limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["IContainerFeeGridPagedResponse"]
            "application/json": components["schemas"]["IContainerFeeGridPagedResponse"]
            "text/json": components["schemas"]["IContainerFeeGridPagedResponse"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Create Container Fees
     * @description Use this method to create container fees.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ContainerFeesRequest"][]
            | null
          "application/json":
            | components["schemas"]["ContainerFeesRequest"][]
            | null
          "text/json": components["schemas"]["ContainerFeesRequest"][] | null
          "application/*+json":
            | components["schemas"]["ContainerFeesRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["IContainerFeeGrid"]
            "application/json": components["schemas"]["IContainerFeeGrid"]
            "text/json": components["schemas"]["IContainerFeeGrid"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Catalogue/containerfees/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Patch Container Fee
     * @description Use this method to patch a container fee.
     */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["Operation"][]
            | null
          "application/json": components["schemas"]["Operation"][] | null
          "text/json": components["schemas"]["Operation"][] | null
          "application/*+json": components["schemas"]["Operation"][] | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["IContainerFeeGrid"]
            "application/json": components["schemas"]["IContainerFeeGrid"]
            "text/json": components["schemas"]["IContainerFeeGrid"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
      }
    }
    trace?: never
  }
  "/api/v4/Catalogue/containerfees/{containerFeeId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete Container Fee */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          containerFeeId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Category": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Categories
     * @description Use this method to get all parent categories and all their children.
     *                 - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *                 - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Category"][]
            "application/json": components["schemas"]["Category"][]
            "text/json": components["schemas"]["Category"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Create Categories
     * @description Use this method to create categories. Nested categories cannot be created in a single method call.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["CategoryCreateRequest"][]
            | null
          "application/json":
            | components["schemas"]["CategoryCreateRequest"][]
            | null
          "text/json": components["schemas"]["CategoryCreateRequest"][] | null
          "application/*+json":
            | components["schemas"]["CategoryCreateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Categories created OK. */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Category"][]
            "application/json": components["schemas"]["Category"][]
            "text/json": components["schemas"]["Category"][]
          }
        }
        /** @description Validation error. */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Delete Categories
     * @description Use this method to delete categories. Deleting a parent category will delete the children categories.
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Category/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Category by id
     * @description Use this method to find a single category. If the category is a parent at the root, all the children is returned.
     *                 If the category is a parent as well as a child to another category, parent of the search category is not returned.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Category"]
            "application/json": components["schemas"]["Category"]
            "text/json": components["schemas"]["Category"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Update Categories
     * @description Use this method to update categories.
     *                 - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *                 optional parameters that are not provided will be set to their default value.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["CategoryUpdateRequest"][]
            | null
          "application/json":
            | components["schemas"]["CategoryUpdateRequest"][]
            | null
          "text/json": components["schemas"]["CategoryUpdateRequest"][] | null
          "application/*+json":
            | components["schemas"]["CategoryUpdateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Category"][]
            "application/json": components["schemas"]["Category"][]
            "text/json": components["schemas"]["Category"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Category/List": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Categories by id list. */
    get: {
      parameters: {
        query?: {
          ids?: number[] | null
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": Record<string, never>[]
            "application/json": Record<string, never>[]
            "text/json": Record<string, never>[]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/CategoryImage": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create Category Images
     * @description Use this method to add or update a category image. Once this has been created, the actual image must be uploaded to S3 using the pre-signed URL.
     *     - AWS docs: https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html
     *     - If an image is marked as MainImage=true then it will be renamed to {CompanyId}{CategoryId}CategoryImg{FileType}
     *     e.g. abc123ab-ab12-ab1-ab12-abcd1234abcd99CategoryImg.png
     *     - Any images that are larger than 2048 x 2048 will be resized
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["CategoryImageUpsertRequest"][]
            | null
          "application/json":
            | components["schemas"]["CategoryImageUpsertRequest"][]
            | null
          "text/json":
            | components["schemas"]["CategoryImageUpsertRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["CategoryImageUpsertRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["PreSignedCategoryImageTransactionResponse"][]
            "application/json": components["schemas"]["PreSignedCategoryImageTransactionResponse"][]
            "text/json": components["schemas"]["PreSignedCategoryImageTransactionResponse"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Delete Category Images */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/CategoryImage/UploadStatus/{uploadTransactionId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          uploadTransactionId: string | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ImageUploadResult"][]
            "application/json": components["schemas"]["ImageUploadResult"][]
            "text/json": components["schemas"]["ImageUploadResult"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/CategoryReferenceCode": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all CategoryReferenceCodes
     * @description Use this method to get all the category reference codes.
     *                 - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *                 - Not providing <strong>page</strong> will return items for page 1.
     *                 Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 Reference code methods always deal with the Reference codes registered with the authorizing token.
     */
    get: {
      parameters: {
        query?: {
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["CategoryReferenceCode"][]
            "application/json": components["schemas"]["CategoryReferenceCode"][]
            "text/json": components["schemas"]["CategoryReferenceCode"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Create CategoryReferenceCodes
     * @description Use this method to create CategoryReferenceCodes.
     *                 - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 - Reference codes are only registered against your Auth Token.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["CategoryReferenceCodeCreateRequest"][]
            | null
          "application/json":
            | components["schemas"]["CategoryReferenceCodeCreateRequest"][]
            | null
          "text/json":
            | components["schemas"]["CategoryReferenceCodeCreateRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["CategoryReferenceCodeCreateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["CategoryReferenceCode"][]
            "application/json": components["schemas"]["CategoryReferenceCode"][]
            "text/json": components["schemas"]["CategoryReferenceCode"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Delete CategoryReferenceCodes
     * @description Use this method to delete CategoryReferenceCodes.
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/CategoryReferenceCode/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a CategoryReferenceCode by id
     * @description Use this method to get a category reference code.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["CategoryReferenceCode"]
            "application/json": components["schemas"]["CategoryReferenceCode"]
            "text/json": components["schemas"]["CategoryReferenceCode"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Update CategoryReferenceCodes
     * @description Use this method to update CategoryReferenceCodes.
     *                 - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *                 optional parameters that are not provided will be set to their default value.
     *                 - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 - Reference codes are only registered against your Auth Token.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["CategoryReferenceCodeUpdateRequest"][]
            | null
          "application/json":
            | components["schemas"]["CategoryReferenceCodeUpdateRequest"][]
            | null
          "text/json":
            | components["schemas"]["CategoryReferenceCodeUpdateRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["CategoryReferenceCodeUpdateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["CategoryReferenceCode"][]
            "application/json": components["schemas"]["CategoryReferenceCode"][]
            "text/json": components["schemas"]["CategoryReferenceCode"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/CategoryReferenceCode/Category/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a CategoryReferenceCode by category id
     * @description Use this method to get a category reference code by Category id.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["CategoryReferenceCode"]
            "application/json": components["schemas"]["CategoryReferenceCode"]
            "text/json": components["schemas"]["CategoryReferenceCode"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ContainerFee": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Container Fee List
     * @description Use this method to get all the Container Fee List
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ContainerFee"][]
            "application/json": components["schemas"]["ContainerFee"][]
            "text/json": components["schemas"]["ContainerFee"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Update Container Fees
     * @description Use this method to update Container Fees.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ContainerFeeUpdateRequest"][]
            | null
          "application/json":
            | components["schemas"]["ContainerFeeUpdateRequest"][]
            | null
          "text/json":
            | components["schemas"]["ContainerFeeUpdateRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["ContainerFeeUpdateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ContainerFee"][]
            "application/json": components["schemas"]["ContainerFee"][]
            "text/json": components["schemas"]["ContainerFee"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Create Container Fees
     * @description Use this method to create Container Fees.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ContainerFeeRequest"][]
            | null
          "application/json":
            | components["schemas"]["ContainerFeeRequest"][]
            | null
          "text/json": components["schemas"]["ContainerFeeRequest"][] | null
          "application/*+json":
            | components["schemas"]["ContainerFeeRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ContainerFee"][]
            "application/json": components["schemas"]["ContainerFee"][]
            "text/json": components["schemas"]["ContainerFee"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Delete Container Fees by ids */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ContainerFee/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a Container Fee Details by Id */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ContainerFee"]
            "application/json": components["schemas"]["ContainerFee"]
            "text/json": components["schemas"]["ContainerFee"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/PriceSchedule/PriceBands": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Price Bands
     * @description Use this method to get all the price bands
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["PriceBand"][]
            "application/json": components["schemas"]["PriceBand"][]
            "text/json": components["schemas"]["PriceBand"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/PriceSchedule": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Price Schedules for the given location
     * @description Use this method to get all the price schedules for the given location
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["PriceSchedule"][]
            "application/json": components["schemas"]["PriceSchedule"][]
            "text/json": components["schemas"]["PriceSchedule"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Products
     * @description Use this method to get all products.
     *     - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *     - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"][]
            "application/json": components["schemas"]["Product"][]
            "text/json": components["schemas"]["Product"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Update Products
     * @description Use this method to update products.
     *                 - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *                 optional parameters that are not provided will be set to their default value.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductUpdateRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductUpdateRequest"][]
            | null
          "text/json": components["schemas"]["ProductUpdateRequest"][] | null
          "application/*+json":
            | components["schemas"]["ProductUpdateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"][]
            "application/json": components["schemas"]["Product"][]
            "text/json": components["schemas"]["Product"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Create Products
     * @description Use this method to create products.
     *     The GetById method can be used with "showDeleted" set as true in order to check that an existing product is deleted.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductCreateRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductCreateRequest"][]
            | null
          "text/json": components["schemas"]["ProductCreateRequest"][] | null
          "application/*+json":
            | components["schemas"]["ProductCreateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"][]
            "application/json": components["schemas"]["Product"][]
            "text/json": components["schemas"]["Product"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Delete Products */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/WebProducts": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Web Products
     * @description Use this method to get all products that are marked SellOnWeb = true or they have a ProductReferenceCode set for your app.
     *     This will make it possible to resolve which products have been extrenally synced already and any those that have since been set to SellOnWeb = false.
     *     - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *     - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["WebProduct"][]
            "application/json": components["schemas"]["WebProduct"][]
            "text/json": components["schemas"]["WebProduct"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/WebProducts/Count": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Web Products
     * @description Use this method to get all products that are marked SellOnWeb = true or they have a ProductReferenceCode set for your app.
     *     This will make it possible to resolve which products have been extrenally synced already and any those that have since been set to SellOnWeb = false.
     *     - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *     - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["WebProduct"][]
            "application/json": components["schemas"]["WebProduct"][]
            "text/json": components["schemas"]["WebProduct"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a Product by Id */
    get: {
      parameters: {
        query?: {
          showDeleted?: boolean
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"]
            "application/json": components["schemas"]["Product"]
            "text/json": components["schemas"]["Product"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    /** Delete Product by id */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/Stats": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get referenced Product statistics */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductCount"]
            "application/json": components["schemas"]["ProductCount"]
            "text/json": components["schemas"]["ProductCount"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/{productId}/DuplicateProductByColour": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Duplicates a Product based based on a given Colour
     * @description Use this method generate product colour variants.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          productId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ProductDuplicateByColourRequest"]
          "application/json": components["schemas"]["ProductDuplicateByColourRequest"]
          "text/json": components["schemas"]["ProductDuplicateByColourRequest"]
          "application/*+json": components["schemas"]["ProductDuplicateByColourRequest"]
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"][]
            "application/json": components["schemas"]["Product"][]
            "text/json": components["schemas"]["Product"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/{productId}/GenerateProductVariants": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Generates Product variants based based on a given VariantMap
     * @description Use this method generate product variants.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          productId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ProductGenerateVariantsRequest"]
          "application/json": components["schemas"]["ProductGenerateVariantsRequest"]
          "text/json": components["schemas"]["ProductGenerateVariantsRequest"]
          "application/*+json": components["schemas"]["ProductGenerateVariantsRequest"]
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"][]
            "application/json": components["schemas"]["Product"][]
            "text/json": components["schemas"]["Product"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/name": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create Product by name */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ProductCreatByNameRequest"]
          "application/json": components["schemas"]["ProductCreatByNameRequest"]
          "text/json": components["schemas"]["ProductCreatByNameRequest"]
          "application/*+json": components["schemas"]["ProductCreatByNameRequest"]
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/{id}/TransactionItem/CostPrice": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get cost price for transaction item by product id */
    get: {
      parameters: {
        query?: {
          locationId?: number
          isCorporateAndFranchise?: boolean
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/List": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Products by id list. */
    get: {
      parameters: {
        query?: {
          ids?: number[] | null
          showDeleted?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"][]
            "application/json": components["schemas"]["Product"][]
            "text/json": components["schemas"]["Product"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/ListByReferenceCodes": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Products by reference code list. */
    get: {
      parameters: {
        query?: {
          referenceCodes?: string[] | null
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["Product"][]
            "application/json": components["schemas"]["Product"][]
            "text/json": components["schemas"]["Product"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/{productId}/CustomerProductPricing": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Customer Specific Pricing By ProductId */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          productId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["CustomerProductPricing"][]
            "application/json": components["schemas"]["CustomerProductPricing"][]
            "text/json": components["schemas"]["CustomerProductPricing"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /** Create Customer Specific Pricing By ProductId */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          productId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["CustomerTypePrices"][]
            | null
          "application/json":
            | components["schemas"]["CustomerTypePrices"][]
            | null
          "text/json": components["schemas"]["CustomerTypePrices"][] | null
          "application/*+json":
            | components["schemas"]["CustomerTypePrices"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["CustomerProductPricing"][]
            "application/json": components["schemas"]["CustomerProductPricing"][]
            "text/json": components["schemas"]["CustomerProductPricing"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Delete Customer Specific Pricing By CustomerTypeId */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          productId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/unavailableProducts": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all unavailable products for the current Till
     * @description Use this method to get all unavailable products for the location stored on the user context.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": number[]
            "application/json": number[]
            "text/json": number[]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/{productId}/availability": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the product availability information for the current Till
     * @description Returns the availability status for that product in the current location.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Product ID */
          productId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductAvailability"]
            "application/json": components["schemas"]["ProductAvailability"]
            "text/json": components["schemas"]["ProductAvailability"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Updates a product availability.
     * @description Use this method to set the product availability for the current location.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Product ID */
          productId: number
        }
        cookie?: never
      }
      /** @description JSON Object with an 'IsAvailable' boolean field for setting the Product status */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ProductUpdateAvailabilityRequest"]
          "application/json": components["schemas"]["ProductUpdateAvailabilityRequest"]
          "text/json": components["schemas"]["ProductUpdateAvailabilityRequest"]
          "application/*+json": components["schemas"]["ProductUpdateAvailabilityRequest"]
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductAvailability"]
            "application/json": components["schemas"]["ProductAvailability"]
            "text/json": components["schemas"]["ProductAvailability"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/unavailableProductsForLocation/{locationId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all unavailable products for a location
     * @description Use this method to get all unavailable products for the location stored on the user context.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Till's location ID */
          locationId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": number[]
            "application/json": number[]
            "text/json": number[]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/Product/{productId}/availabilityForLocation/{locationId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the product availability information for a location
     * @description Returns the availability status for that product in the current location.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Product ID */
          productId: number
          /** @description Till's location ID */
          locationId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductAvailability"]
            "application/json": components["schemas"]["ProductAvailability"]
            "text/json": components["schemas"]["ProductAvailability"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Updates a product availability for a location
     * @description Use this method to set the product availability for the current location.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Product ID */
          productId: number
          /** @description Till's location ID */
          locationId: number
        }
        cookie?: never
      }
      /** @description JSON Object with an 'IsAvailable' boolean field for setting the Product status */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ProductUpdateAvailabilityRequest"]
          "application/json": components["schemas"]["ProductUpdateAvailabilityRequest"]
          "text/json": components["schemas"]["ProductUpdateAvailabilityRequest"]
          "application/*+json": components["schemas"]["ProductUpdateAvailabilityRequest"]
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductAvailability"]
            "application/json": components["schemas"]["ProductAvailability"]
            "text/json": components["schemas"]["ProductAvailability"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductComposition": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all ProductCompositions.
     * @description Include/excluded deleted products with showDeleted=true/false.
     */
    get: {
      parameters: {
        query?: {
          page?: number
          showDeleted?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductComposition"][]
            "application/json": components["schemas"]["ProductComposition"][]
            "text/json": components["schemas"]["ProductComposition"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Update ProductCompositions */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductCompositionUpdateRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductCompositionUpdateRequest"][]
            | null
          "text/json":
            | components["schemas"]["ProductCompositionUpdateRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["ProductCompositionUpdateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductComposition"][]
            "application/json": components["schemas"]["ProductComposition"][]
            "text/json": components["schemas"]["ProductComposition"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Create ProductCompositions */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductCompositionCreateRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductCompositionCreateRequest"][]
            | null
          "text/json":
            | components["schemas"]["ProductCompositionCreateRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["ProductCompositionCreateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductComposition"][]
            "application/json": components["schemas"]["ProductComposition"][]
            "text/json": components["schemas"]["ProductComposition"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Delete ProductCompositions */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductComposition"][]
            "application/json": components["schemas"]["ProductComposition"][]
            "text/json": components["schemas"]["ProductComposition"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductComposition/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a ProductComposition by id */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductComposition"]
            "application/json": components["schemas"]["ProductComposition"]
            "text/json": components["schemas"]["ProductComposition"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductComposition/GetByProductId/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all ProductCompositions for a product.
     * @description Include/excluded deleted products with showDeleted=true/false.
     */
    get: {
      parameters: {
        query?: {
          showDeleted?: boolean
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductComposition"][]
            "application/json": components["schemas"]["ProductComposition"][]
            "text/json": components["schemas"]["ProductComposition"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductGroup": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Product Groups
     * @description Use this method to get all product groups.
     */
    get: {
      parameters: {
        query?: {
          checkIfMultiSiteManagerIsEnabled?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductGroup"][]
            "application/json": components["schemas"]["ProductGroup"][]
            "text/json": components["schemas"]["ProductGroup"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductImage": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Products Images
     * @description Use this method to get all the Products Images.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductImageDetails"][]
            "application/json": components["schemas"]["ProductImageDetails"][]
            "text/json": components["schemas"]["ProductImageDetails"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Create Product Images
     * @description Use this method to create product image links. Once these have been created, the actual images must be uploaded to S3 using the pre-signed URL.
     *     - AWS docs: https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html
     *     - If an image is marked as MainImage=true then it will be renamed to {ProductId}ProductImg{Extension}
     *     e.g. 123ProductImg.png.
     *     - Any images that are larger than 1024 x 1024 will be resized
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductImageUpsertRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductImageUpsertRequest"][]
            | null
          "text/json":
            | components["schemas"]["ProductImageUpsertRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["ProductImageUpsertRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["PreSignedProductImageTransactionResponse"][]
            "application/json": components["schemas"]["PreSignedProductImageTransactionResponse"][]
            "text/json": components["schemas"]["PreSignedProductImageTransactionResponse"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /** Delete Product Images */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductImage/UploadStatus/{uploadTransactionId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          uploadTransactionId: string | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ImageUploadResult"][]
            "application/json": components["schemas"]["ImageUploadResult"][]
            "text/json": components["schemas"]["ImageUploadResult"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductImage/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Product Images by product id
     * @description Use this method to find images for a single product.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductImageDetails"]
            "application/json": components["schemas"]["ProductImageDetails"]
            "text/json": components["schemas"]["ProductImageDetails"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductImage/Url": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upload Product Image Urls by Product Id
     * @description Use this method to upload product Image Urls
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductImageUrlRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductImageUrlRequest"][]
            | null
          "text/json": components["schemas"]["ProductImageUrlRequest"][] | null
          "application/*+json":
            | components["schemas"]["ProductImageUrlRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductImageUrlRequest"][]
            "application/json": components["schemas"]["ProductImageUrlRequest"][]
            "text/json": components["schemas"]["ProductImageUrlRequest"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductReferenceCode": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all ProductReferenceCodes
     * @description Use this method to get all the product reference codes.
     *                 - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *                 - Not providing <strong>page</strong> will return items for page 1.
     *                 Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 Reference code methods always deal with the Reference codes registered with the authorizing token.
     */
    get: {
      parameters: {
        query?: {
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductReferenceCode"][]
            "application/json": components["schemas"]["ProductReferenceCode"][]
            "text/json": components["schemas"]["ProductReferenceCode"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * Create ProductReferenceCodes
     * @description Use this method to create ProductReferenceCodes.
     *                 - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 - Reference codes are only registered against your Auth Token.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductReferenceCodeCreateRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductReferenceCodeCreateRequest"][]
            | null
          "text/json":
            | components["schemas"]["ProductReferenceCodeCreateRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["ProductReferenceCodeCreateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductReferenceCode"][]
            "application/json": components["schemas"]["ProductReferenceCode"][]
            "text/json": components["schemas"]["ProductReferenceCode"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Delete ProductReferenceCodes
     * @description Use this method to delete ProductReferenceCodes.
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductReferenceCode/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a ProductReferenceCode by id
     * @description Use this method to get a product reference code.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductReferenceCode"]
            "application/json": components["schemas"]["ProductReferenceCode"]
            "text/json": components["schemas"]["ProductReferenceCode"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Update ProductReferenceCodes
     * @description Use this method to update ProductReferenceCodes.
     *                 - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *                 optional parameters that are not provided will be set to their default value.
     *                 - Reference codes are convenient way of storing the reference of an entity from an another system that is related to an EposNow entity.
     *                 - Reference codes are only registered against your Auth Token.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["ProductReferenceCodeUpdateRequest"][]
            | null
          "application/json":
            | components["schemas"]["ProductReferenceCodeUpdateRequest"][]
            | null
          "text/json":
            | components["schemas"]["ProductReferenceCodeUpdateRequest"][]
            | null
          "application/*+json":
            | components["schemas"]["ProductReferenceCodeUpdateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductReferenceCode"][]
            "application/json": components["schemas"]["ProductReferenceCode"][]
            "text/json": components["schemas"]["ProductReferenceCode"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/ProductReferenceCode/ProductReferenceCode/Product/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a ProductReferenceCode by product id
     * @description Use this method to get a product reference code by product id.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["ProductReferenceCode"]
            "application/json": components["schemas"]["ProductReferenceCode"]
            "text/json": components["schemas"]["ProductReferenceCode"]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/VariantMap": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all VariantMaps
     * @description VariantMaps are used as part of variant products. Use this method to get all VariantMaps.
     *                 - Supports pagination via <strong>page</strong> parameter. 200 response items per page.
     *                 - Not providing <strong>page</strong> will return items for page 1.
     */
    get: {
      parameters: {
        query?: {
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["VariantMap"][]
            "application/json": components["schemas"]["VariantMap"][]
            "text/json": components["schemas"]["VariantMap"][]
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Update VariantMaps
     * @description Use this method to update VariantMaps.
     *     - This method supports only full updates, you must supply the full object model when updating. If you do not provide required parameters the operation could fail,
     *     optional parameters that are not provided will be set to their default value.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["VariantMapUpdateRequest"][]
            | null
          "application/json":
            | components["schemas"]["VariantMapUpdateRequest"][]
            | null
          "text/json": components["schemas"]["VariantMapUpdateRequest"][] | null
          "application/*+json":
            | components["schemas"]["VariantMapUpdateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["VariantMap"][]
            "application/json": components["schemas"]["VariantMap"][]
            "text/json": components["schemas"]["VariantMap"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Create VariantMaps
     * @description Use this method to create VariantMaps.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["VariantMapCreateRequest"][]
            | null
          "application/json":
            | components["schemas"]["VariantMapCreateRequest"][]
            | null
          "text/json": components["schemas"]["VariantMapCreateRequest"][] | null
          "application/*+json":
            | components["schemas"]["VariantMapCreateRequest"][]
            | null
        }
      }
      responses: {
        /** @description Success */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["VariantMap"][]
            "application/json": components["schemas"]["VariantMap"][]
            "text/json": components["schemas"]["VariantMap"][]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Delete VariantMaps
     * @description Use this method to delete VariantMaps.
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json-patch+json":
            | components["schemas"]["DeleteRequest"][]
            | null
          "application/json": components["schemas"]["DeleteRequest"][] | null
          "text/json": components["schemas"]["DeleteRequest"][] | null
          "application/*+json": components["schemas"]["DeleteRequest"][] | null
        }
      }
      responses: {
        /** @description Success */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v4/VariantMap/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get VariantMap by id
     * @description VariantMaps are used as part of variant products. Use this method to find a single VariantMap.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": components["schemas"]["VariantMap"]
            "application/json": components["schemas"]["VariantMap"]
            "text/json": components["schemas"]["VariantMap"]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/plain": string
            "application/json": string
            "text/json": string
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    TaxGroupRate: {
      /** Format: int32 */
      TaxGroupId?: number
      /** Format: int32 */
      TaxRateId?: number
      /** Format: int32 */
      LocationId?: number | null
      /** Format: int32 */
      Priority?: number | null
      /** Format: double */
      Percentage?: number
      Name?: string | null
      Description?: string | null
      TaxCode?: string | null
    }
    TaxGroup: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      TaxRates?: components["schemas"]["TaxGroupRate"][] | null
    }
    ProductPricing: {
      IsPriceIncludingTax?: boolean
      /** Format: double */
      Price?: number
      TaxGroup?: components["schemas"]["TaxGroup"]
      /** Format: double */
      PriceIncTax?: number
      /** Format: double */
      PriceExTax?: number
    }
    IProductGrid: {
      Id?: number
      Name?: string | null
      Description?: string | null
      /** Format: double */
      CostPrice?: number
      CostPricing?: components["schemas"]["ProductPricing"]
      IsCostPriceIncTax?: boolean
      /** Format: double */
      readonly CostPriceIncTax?: number
      /** Format: double */
      readonly CostPriceExTax?: number
      CostPriceTaxGroupName?: string | null
      /** Format: int32 */
      CostPriceTaxGroupId?: number | null
      /** Format: double */
      SalePrice?: number
      SalePricing?: components["schemas"]["ProductPricing"]
      IsSalePriceIncTax?: boolean
      /** Format: double */
      readonly SalePriceIncTax?: number
      /** Format: double */
      readonly SalePriceExTax?: number
      SalePriceTaxGroupName?: string | null
      /** Format: int32 */
      SalePriceTaxGroupId?: number | null
      /** Format: double */
      EatOutPrice?: number
      EatOutPricing?: components["schemas"]["ProductPricing"]
      IsEatOutPriceIncTax?: boolean
      /** Format: double */
      readonly EatOutPriceIncTax?: number
      /** Format: double */
      readonly EatOutPriceExTax?: number
      EatOutPriceTaxGroupName?: string | null
      /** Format: int32 */
      EatOutPriceTaxGroupId?: number | null
      /** Format: int32 */
      CategoryId?: number | null
      CategoryName?: string | null
      /** Format: int32 */
      ButtonColourId?: number | null
      ButtonColourName?: string | null
      Barcode?: string | null
      /** Format: int32 */
      UnitOfSale?: number | null
      /** Format: int32 */
      VolumeOfSale?: number | null
      /** Format: int32 */
      MeasurementSchemeItemID?: number | null
      /** Format: int32 */
      MeasurementUnitVolume?: number | null
      /** Format: int32 */
      CostPriceMeasurementSchemeItemID?: number | null
      /** Format: int32 */
      CostPriceMeasurementUnitVolume?: number | null
      IsVariablePrice?: boolean
      TaxExemptEligible?: boolean
      ExcludeFromLoyaltyPointsGain?: boolean
      /** Format: int32 */
      ContainerFeeId?: number | null
      ContainerFeeName?: string | null
      /** Format: double */
      ContainerFeeValue?: number
      /** Format: int32 */
      BrandId?: number | null
      BrandName?: string | null
      /** Format: int32 */
      SupplierId?: number | null
      SupplierName?: string | null
      /** Format: int32 */
      VariantId?: number | null
      /** Format: int32 */
      VariantItemId?: number | null
      VariantDescription?: string | null
      /** Format: int32 */
      ColourId?: number | null
      ColourName?: string | null
      /** Format: int32 */
      ProductType?: number
      SellOnTill?: boolean
      SellOnWeb?: boolean
      /** Format: int32 */
      TillOrder?: number | null
      /** Format: double */
      RrPrice?: number | null
      OrderCode?: string | null
      ArticleCode?: string | null
      /** Format: int32 */
      PopupNoteId?: number | null
      PopupNoteShortDescription?: string | null
      /** Format: int32 */
      MultiChoiceNoteId?: number | null
      MultiChoiceNoteName?: string | null
      /** Format: int32 */
      TareWeight?: number | null
      Sku?: string | null
      /** Format: int32 */
      MagentoAttributeSetId?: number | null
      MagentoAttributeSetName?: string | null
      /** Format: int32 */
      AgeRestriction?: number | null
      /** Format: double */
      Margin?: number | null
      ScannableOnly?: boolean
      /** Format: int32 */
      OrderQuantityLimit?: number | null
    }
    PaginationMetadata: {
      /** Format: int32 */
      Page?: number
      /** Format: int32 */
      Limit?: number
      /** Format: int32 */
      TotalPages?: number
      /** Format: int32 */
      TotalRecords?: number
      /** Format: int32 */
      CurrentPageSize?: number
    }
    PaginationLinks: {
      /** Format: uri */
      BaseURL?: string | null
      FirstPage?: string | null
      LastPage?: string | null

      NextPage?: string | null
      PreviousPage?: string | null
    }
    IProductGridPagedResponse: {
      Data?: components["schemas"]["IProductGrid"][] | null
      Metadata?: components["schemas"]["PaginationMetadata"]
      Links?: components["schemas"]["PaginationLinks"]
    }
    ProductGridRequest: {
      Name: string
      Description?: string | null
      IsCostPriceIncTax?: boolean
      IsSalePriceIncTax?: boolean
      IsEatOutPriceIncTax?: boolean
      /** Format: double */
      CostPrice: number
      /** Format: double */
      SalePrice: number
      /** Format: double */
      EatOutPrice: number
      /** Format: int32 */
      SalePriceTaxGroupId?: number | null
      /** Format: int32 */
      CostPriceTaxGroupId?: number | null
      /** Format: int32 */
      EatOutPriceTaxGroupId?: number | null
      /** Format: int32 */
      CategoryId?: number | null
      Barcode?: string | null
      /** Format: int32 */
      ButtonColourId?: number | null
      IsArchived?: boolean
      IsVariablePrice?: boolean
      TaxExemptEligible?: boolean
      ExcludeFromLoyaltyPointsGain?: boolean
      /** Format: int32 */
      ContainerFeeId?: number | null
      /** Format: int32 */
      BrandId?: number | null
      /** Format: int32 */
      SupplierId?: number | null
      /** Format: int32 */
      VariantItemId?: number | null
      /** Format: int32 */
      ColourId?: number | null
      /** Format: int32 */
      ProductType?: number
      /** @default true */
      SellOnTill: boolean
      /** @default false */
      SellOnWeb: boolean
      /** Format: int32 */
      TillOrder?: number | null
      /** Format: double */
      RrPrice?: number | null
      OrderCode?: string | null
      ArticleCode?: string | null
      /** Format: int32 */
      PopupNoteId?: number | null
      /** Format: int32 */
      MultiChoiceNoteId?: number | null
      /** Format: int32 */
      TareWeight?: number | null
      Sku?: string | null
      /** Format: int32 */
      MagentoAttributeSetId?: number | null
      /** Format: int32 */
      UnitOfSale?: number | null
      /** Format: int32 */
      VolumeOfSale?: number | null
      /** Format: int32 */
      MeasurementSchemeItemID?: number | null
      /** Format: int32 */
      MeasurementUnitVolume?: number | null
      /** Format: int32 */
      CostPriceMeasurementSchemeItemID?: number | null
      /** Format: int32 */
      CostPriceMeasurementUnitVolume?: number | null
      /** Format: int32 */
      AgeRestriction?: number | null
      /** @default false */
      ScannableOnly: boolean
      /** Format: int32 */
      OrderQuantityLimit?: number | null
      GenerateBarcode?: boolean
    }
    /**
     * Format: int32
     * @enum {integer}
     */
    OperationType: 0 | 1 | 2 | 3 | 4 | 5 | 6
    Operation: {
      Value?: Record<string, never>
      OperationType?: components["schemas"]["OperationType"]
      Path?: string | null
      Op?: string | null
      From?: string | null
    }
    IContainerFeeGrid: {
      Name?: string | null
      /** Format: int32 */
      ContainerFeeId?: number
      /** Format: double */
      FeeValue?: number
    }
    IContainerFeeGridPagedResponse: {
      Data?: components["schemas"]["IContainerFeeGrid"][] | null
      Metadata?: components["schemas"]["PaginationMetadata"]
      Links?: components["schemas"]["PaginationLinks"]
    }
    ContainerFeesRequest: {
      Name: string
      /** Format: double */
      FeeValue: number
    }
    PopupNote: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Note?: string | null
      DisplayOncePerTransaction?: boolean
    }
    Category: {
      /** Format: int32 */
      Id?: number
      /** Format: int32 */
      ParentId?: number | null
      /** Format: int32 */
      RootParentId?: number | null
      Name?: string | null
      Description?: string | null
      ImageUrl?: string | null
      /** Format: int32 */
      PopupNoteId?: number | null
      IsWet?: boolean
      ShowOnTill?: boolean
      ReferenceCode?: string | null
      PopupNote?: components["schemas"]["PopupNote"]
      Children?: components["schemas"]["Category"][] | null
      /** Format: int32 */
      SortPosition?: number | null
      /** Format: int32 */
      ReportingCategoryId?: number | null
      NominalCode?: string | null
      /** Format: int32 */
      PrinterTypeId?: number | null
      /** Format: int32 */
      CourseId?: number | null
      /** Format: int32 */
      ButtonColourId?: number | null
    }
    CategoryCreateRequest: {
      /** Format: int32 */
      ParentId?: number | null
      Name: string
      Description?: string | null
      ImageUrl?: string | null
      /** Format: int32 */
      PopupNoteId?: number | null
      IsWet?: boolean
      ShowOnTill?: boolean
      ReferenceCode?: string | null
      /** Format: int32 */
      ReportingCategoryId?: number | null
      /** Format: int32 */
      PrinterTypeId?: number | null
      /** Format: int32 */
      CourseId?: number | null
      /** Format: int32 */
      SortPosition?: number | null
      /** Format: int32 */
      ButtonColourId?: number | null
      NominalCode?: string | null
    }
    DeleteRequest: {
      /** Format: int32 */
      Id: number
    }
    CategoryUpdateRequest: {
      /** Format: int32 */
      Id: number
      /** Format: int32 */
      ParentId?: number | null
      Name: string
      Description?: string | null
      ImageUrl?: string | null
      /** Format: int32 */
      PopupNoteId?: number | null
      IsWet?: boolean
      ShowOnTill?: boolean
      /** Format: int32 */
      ReportingCategoryId?: number | null
      /** Format: int32 */
      PrinterTypeId?: number | null
      /** Format: int32 */
      CourseId?: number | null
      /** Format: int32 */
      SortPosition?: number | null
      /** Format: int32 */
      ButtonColourId?: number | null
      NominalCode?: string | null
    }
    CategoryImageUpsertRequest: {
      /** Format: int32 */
      CategoryId: number
      FileType: string
    }
    PreSignedCategoryImageResponse: {
      CategoryId?: string | null
      ImageUrl?: string | null
      PreSignedUrl?: string | null
    }
    PreSignedCategoryImageTransactionResponse: {
      TransactionId?: string | null
      CategoryImages?:
        | components["schemas"]["PreSignedCategoryImageResponse"][]
        | null
    }
    ImageUploadResult: {
      FileName?: string | null
      Result?: string | null
    }
    CategoryReferenceCode: {
      /** Format: int32 */
      Id?: number
      /** Format: int32 */
      CategoryId?: number
      /** Format: int32 */
      AppId?: number
      ReferenceCode?: string | null
    }
    CategoryReferenceCodeCreateRequest: {
      /** Format: int32 */
      CategoryId: number
      ReferenceCode: string
    }
    CategoryReferenceCodeUpdateRequest: {
      /** Format: int32 */
      Id: number
      ReferenceCode: string
    }
    ContainerFee: {
      /** Format: int32 */
      BottleDepositItemID?: number
      Name?: string | null
      /** Format: double */
      Amount?: number
    }
    ContainerFeeRequest: {
      Name: string
      /** Format: double */
      FeeValue: number
    }
    ContainerFeeUpdateRequest: {
      /** Format: int32 */
      ContainerFeeId: number
      Name: string
      /** Format: double */
      FeeValue: number
    }
    PriceBandProduct: {
      /** Format: int32 */
      PriceBandID?: number
      /** Format: int32 */
      ProductID?: number
      /** Format: double */
      SalePrice?: number
      /** Format: double */
      EatOutPrice?: number
    }
    PriceBand: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Description?: string | null
      /** Format: int32 */
      Priority?: number
      Products?: components["schemas"]["PriceBandProduct"][] | null
    }
    DeviceGroup: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
    }
    PriceSchedule: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Description?: string | null
      DeviceGroup?: components["schemas"]["DeviceGroup"]
      StartTime?: string | null
      EndTime?: string | null
      DaysEnabled?: number[] | null
      AllProducts?: boolean
      /** Format: int32 */
      PriceBand?: number | null
    }
    ProductMeasurementDetails: {
      /** Format: int32 */
      SalePriceMeasurementSchemeItemId?: number
      /** Format: int32 */
      SalePriceMeasurementUnitVolume?: number
      /** Format: int32 */
      SalePriceFactor?: number
      SalePriceUnit?: string | null
      /** Format: int32 */
      CostPriceMeasurementSchemeItemId?: number
      /** Format: int32 */
      CostPriceMeasurementUnitVolume?: number
      /** Format: int32 */
      CostPriceFactor?: number
      CostPriceUnit?: string | null
    }
    Supplier: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Description?: string | null
      AddressLine1?: string | null
      AddressLine2?: string | null
      Town?: string | null
      County?: string | null
      PostCode?: string | null
      ContactNumber?: string | null
      ContactNumber2?: string | null
      EmailAddress?: string | null
      Type?: string | null
      ReferenceCode?: string | null
    }
    Tag: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
    }
    Udf: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Value?: string | null
    }
    LocationAreaPrice: {
      /** Format: int32 */
      LocationAreaId?: number
      /** Format: double */
      SalePrice?: number
      /** Format: double */
      CostPriceExcTax?: number
      /** Format: double */
      EatOutPrice?: number
    }
    ProductImage: {
      /** Format: int32 */
      ProductId?: number
      /** Format: int32 */
      ProductImageId?: number
      ImageUrl?: string | null
      MainImage?: boolean
    }
    CustomerProductPricing: {
      /** Format: int32 */
      PriceId?: number
      /** Format: int32 */
      TypeId?: number
      TypeName?: string | null
      /** Format: double */
      Price?: number
      /** Format: double */
      EatOutPrice?: number | null
      /** Format: int32 */
      ProductId?: number
    }
    ProductDetails: {
      /** Format: int32 */
      ProductId?: number
      DetailedDescription?: string | null
    }
    Product: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Description?: string | null
      /** Format: double */
      CostPrice?: number
      IsCostPriceIncTax?: boolean
      /** Format: double */
      SalePrice?: number
      IsSalePriceIncTax?: boolean
      /** Format: double */
      EatOutPrice?: number
      IsEatOutPriceIncTax?: boolean
      /** Format: int32 */
      CategoryId?: number | null
      Barcode?: string | null
      /** Format: int32 */
      SalePriceTaxGroupId?: number | null
      /** Format: int32 */
      EatOutPriceTaxGroupId?: number | null
      /** Format: int32 */
      CostPriceTaxGroupId?: number | null
      /** Format: int32 */
      BrandId?: number | null
      /** Format: int32 */
      SupplierId?: number | null
      /** Format: int32 */
      PopupNoteId?: number | null
      /** Format: int32 */
      UnitOfSale?: number | null
      /** Format: int32 */
      VolumeOfSale?: number | null
      /** Format: int32 */
      VariantGroupId?: number | null
      /** Format: int32 */
      MultipleChoiceNoteId?: number | null
      Size?: string | null
      Sku?: string | null
      SellOnWeb?: boolean
      SellOnTill?: boolean
      OrderCode?: string | null
      /** Format: int32 */
      SortPosition?: number | null
      /** Format: double */
      RrPrice?: number | null
      /** Format: int32 */
      ProductType?: number
      /** Format: int32 */
      TareWeight?: number | null
      ArticleCode?: string | null
      IsTaxExemptable?: boolean
      ReferenceCode?: string | null
      IsVariablePrice?: boolean
      ExcludeFromLoyaltyPointsGain?: boolean
      IsArchived?: boolean
      /** Format: int32 */
      ColourId?: number | null
      MeasurementDetails?: components["schemas"]["ProductMeasurementDetails"]
      Supplier?: components["schemas"]["Supplier"]
      SalePriceTaxGroup?: components["schemas"]["TaxGroup"]
      EatOutPriceTaxGroup?: components["schemas"]["TaxGroup"]
      CostPriceTaxGroup?: components["schemas"]["TaxGroup"]
      ProductTags?: components["schemas"]["Tag"][] | null
      ProductUdfs?: components["schemas"]["Udf"][] | null
      AdditionalSuppliersIds?: number[] | null
      ProductLocationAreaPrices?:
        | components["schemas"]["LocationAreaPrice"][]
        | null
      ProductImages?: components["schemas"]["ProductImage"][] | null
      IsMultipleChoiceProductOptional?: boolean
      CustomerProductPricingDetails?:
        | components["schemas"]["CustomerProductPricing"][]
        | null
      /** Format: int32 */
      ContainerFeeId?: number | null
      /** Format: int32 */
      ButtonColourId?: number | null
      ProductDetails?: components["schemas"]["ProductDetails"]
    }
    ProductMeasurementDetailsRequest: {
      /** Format: int32 */
      SalePriceMeasurementSchemeItemId?: number
      /** Format: int32 */
      SalePriceMeasurementUnitVolume?: number
      /** Format: int32 */
      CostPriceMeasurementSchemeItemId?: number
      /** Format: int32 */
      CostPriceMeasurementUnitVolume?: number
    }
    TagRequest: {
      Name?: string | null
    }
    UdfRequest: {
      Name?: string | null
      Value?: string | null
    }
    CustomerTypePrices: {
      /** Format: int32 */
      CustomerTypeId?: number
      /** Format: double */
      SalePrice?: number
      /** Format: double */
      EatOutPrice?: number | null
    }
    ProductCreateRequest: {
      ReferenceCode?: string | null
      Name: string
      Description?: string | null
      IsCostPriceIncTax?: boolean
      IsSalePriceIncTax?: boolean
      IsEatOutPriceIncTax?: boolean
      /** Format: double */
      CostPrice: number
      /** Format: double */
      SalePrice: number
      /** Format: double */
      EatOutPrice: number
      /** Format: int32 */
      CategoryId?: number | null
      Barcode?: string | null
      /** Format: int32 */
      BrandId?: number | null
      /** Format: int32 */
      SupplierId?: number | null
      /** Format: int32 */
      PopupNoteId?: number | null
      /** Format: int32 */
      UnitOfSale?: number | null
      /** Format: int32 */
      VolumeOfSale?: number | null
      Sku?: string | null
      SellOnWeb?: boolean
      SellOnTill?: boolean
      OrderCode?: string | null
      /** Format: double */
      RrPrice?: number | null
      /** Format: int32 */
      ProductType?: number
      /** Format: int32 */
      TareWeight?: number | null
      ArticleCode?: string | null
      /** Format: int32 */
      SalePriceTaxGroupId?: number | null
      /** Format: int32 */
      EatOutPriceTaxGroupId?: number | null
      /** Format: int32 */
      CostPriceTaxGroupId?: number | null
      IsTaxExemptable?: boolean
      IsVariablePrice?: boolean
      ExcludeFromLoyaltyPointsGain?: boolean
      /** Format: int32 */
      VariantGroupId?: number | null
      /** Format: int32 */
      MultipleChoiceNoteId?: number | null
      Size?: string | null
      /** Format: int32 */
      SortPosition?: number | null
      IsArchived?: boolean
      /** Format: int32 */
      ColourId?: number | null
      MeasurementDetails?: components["schemas"]["ProductMeasurementDetailsRequest"]
      ProductTags?: components["schemas"]["TagRequest"][] | null
      ProductUdfs?: components["schemas"]["UdfRequest"][] | null
      AdditionalSuppliersIds?: number[] | null
      CustomerProductPricingDetails?:
        | components["schemas"]["CustomerTypePrices"][]
        | null
      IsMultipleChoiceProductOptional?: boolean | null
      /** Format: int32 */
      ContainerFeeId?: number | null
      LocationAreaPrices?: components["schemas"]["LocationAreaPrice"][] | null
      /** Format: int32 */
      ButtonColourId?: number | null
      ProductDetails?: components["schemas"]["ProductDetails"]
    }
    ProductUpdateRequest: {
      /** Format: int32 */
      Id: number
      Name: string
      Description?: string | null
      IsCostPriceIncTax?: boolean
      IsSalePriceIncTax?: boolean
      IsEatOutPriceIncTax?: boolean
      /** Format: double */
      CostPrice: number
      /** Format: double */
      SalePrice: number
      /** Format: double */
      EatOutPrice: number
      /** Format: int32 */
      CategoryId?: number | null
      Barcode?: string | null
      /** Format: int32 */
      BrandId?: number | null
      /** Format: int32 */
      SupplierId?: number | null
      /** Format: int32 */
      PopupNoteId?: number | null
      /** Format: int32 */
      UnitOfSale?: number | null
      /** Format: int32 */
      VolumeOfSale?: number | null
      Sku?: string | null
      SellOnWeb?: boolean
      SellOnTill?: boolean
      OrderCode?: string | null
      /** Format: double */
      RrPrice?: number | null
      /** Format: int32 */
      ProductType?: number
      /** Format: int32 */
      TareWeight?: number | null
      ArticleCode?: string | null
      /** Format: int32 */
      SalePriceTaxGroupId?: number | null
      /** Format: int32 */
      EatOutPriceTaxGroupId?: number | null
      /** Format: int32 */
      CostPriceTaxGroupId?: number | null
      IsTaxExemptable?: boolean
      IsVariablePrice?: boolean
      ExcludeFromLoyaltyPointsGain?: boolean
      /** Format: int32 */
      VariantGroupId?: number | null
      /** Format: int32 */
      MultipleChoiceNoteId?: number | null
      Size?: string | null
      /** Format: int32 */
      SortPosition?: number | null
      IsArchived?: boolean
      /** Format: int32 */
      ColourId?: number | null
      MeasurementDetails?: components["schemas"]["ProductMeasurementDetailsRequest"]
      ProductTags?: components["schemas"]["TagRequest"][] | null
      ProductUdfs?: components["schemas"]["UdfRequest"][] | null
      AdditionalSuppliersIds?: number[] | null
      CustomerProductPricingDetails?:
        | components["schemas"]["CustomerTypePrices"][]
        | null
      IsMultipleChoiceProductOptional?: boolean | null
      /** Format: int32 */
      ContainerFeeId?: number | null
      LocationAreaPrices?: components["schemas"]["LocationAreaPrice"][] | null
      /** Format: int32 */
      ButtonColourId?: number | null
      ProductDetails?: components["schemas"]["ProductDetails"]
    }
    ProductStockSummary: {
      /** Format: int32 */
      MinStock?: number
      /** Format: int32 */
      CurrentStock?: number
      /** Format: int32 */
      CurrentVolume?: number
    }
    WebProduct: {
      StockSummary?: components["schemas"]["ProductStockSummary"]
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Description?: string | null
      /** Format: double */
      CostPrice?: number
      IsCostPriceIncTax?: boolean
      /** Format: double */
      SalePrice?: number
      IsSalePriceIncTax?: boolean
      /** Format: double */
      EatOutPrice?: number
      IsEatOutPriceIncTax?: boolean
      /** Format: int32 */
      CategoryId?: number | null
      Barcode?: string | null
      /** Format: int32 */
      SalePriceTaxGroupId?: number | null
      /** Format: int32 */
      EatOutPriceTaxGroupId?: number | null
      /** Format: int32 */
      CostPriceTaxGroupId?: number | null
      /** Format: int32 */
      BrandId?: number | null
      /** Format: int32 */
      SupplierId?: number | null
      /** Format: int32 */
      PopupNoteId?: number | null
      /** Format: int32 */
      UnitOfSale?: number | null
      /** Format: int32 */
      VolumeOfSale?: number | null
      /** Format: int32 */
      VariantGroupId?: number | null
      /** Format: int32 */
      MultipleChoiceNoteId?: number | null
      Size?: string | null
      Sku?: string | null
      SellOnWeb?: boolean
      SellOnTill?: boolean
      OrderCode?: string | null
      /** Format: int32 */
      SortPosition?: number | null
      /** Format: double */
      RrPrice?: number | null
      /** Format: int32 */
      ProductType?: number
      /** Format: int32 */
      TareWeight?: number | null
      ArticleCode?: string | null
      IsTaxExemptable?: boolean
      ReferenceCode?: string | null
      IsVariablePrice?: boolean
      ExcludeFromLoyaltyPointsGain?: boolean
      IsArchived?: boolean
      /** Format: int32 */
      ColourId?: number | null
      MeasurementDetails?: components["schemas"]["ProductMeasurementDetails"]
      Supplier?: components["schemas"]["Supplier"]
      SalePriceTaxGroup?: components["schemas"]["TaxGroup"]
      EatOutPriceTaxGroup?: components["schemas"]["TaxGroup"]
      CostPriceTaxGroup?: components["schemas"]["TaxGroup"]
      ProductTags?: components["schemas"]["Tag"][] | null
      ProductUdfs?: components["schemas"]["Udf"][] | null
      AdditionalSuppliersIds?: number[] | null
      ProductLocationAreaPrices?:
        | components["schemas"]["LocationAreaPrice"][]
        | null
      ProductImages?: components["schemas"]["ProductImage"][] | null
      IsMultipleChoiceProductOptional?: boolean
      CustomerProductPricingDetails?:
        | components["schemas"]["CustomerProductPricing"][]
        | null
      /** Format: int32 */
      ContainerFeeId?: number | null
      /** Format: int32 */
      ButtonColourId?: number | null
      ProductDetails?: components["schemas"]["ProductDetails"]
    }
    ProductCount: {
      /** Format: int32 */
      TotalProducts?: number
      /** Format: int32 */
      TotalProductsWithReferenceCodes?: number
    }
    ProductDuplicateByColourRequest: {
      /** Format: int32 */
      ColourId: number
      GenerateBarcode?: boolean
    }
    ProductGenerateVariantsRequest: {
      /** Format: int32 */
      VariantMapId: number
      GenerateBarcodes?: boolean
      CreateSubCategory?: boolean
      ColourIds?: number[] | null
    }
    ProductCreatByNameRequest: {
      Name: string
    }
    ProductAvailability: {
      /** Format: int32 */
      ProductId?: number
      /** Format: int32 */
      LocationId?: number
      IsAvailable?: boolean
    }
    ProductUpdateAvailabilityRequest: {
      IsAvailable: boolean
    }
    ProductComposition: {
      /** Format: int32 */
      Id?: number
      /** Format: int32 */
      ProductId?: number
      /** Format: int32 */
      MasterProductId?: number
      /** Format: int32 */
      Amount?: number
    }
    ProductCompositionUpdateRequest: {
      /** Format: int32 */
      Id: number
      /** Format: int32 */
      Amount: number
    }
    ProductCompositionCreateRequest: {
      /** Format: int32 */
      ProductId: number
      /** Format: int32 */
      MasterProductId: number
      /** Format: int32 */
      Amount: number
    }
    ProductGroupProduct: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      /** Format: int32 */
      ProductGroupId?: number
    }
    ProductGroup: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      Products?: components["schemas"]["ProductGroupProduct"][] | null
    }
    ProductImageUpsertRequest: {
      /** Format: int32 */
      ProductId: number
      ImageName: string
      MainImage: boolean
    }
    PreSignedProductImageResponse: {
      /** Format: int32 */
      ProductId?: number
      ImageUrl?: string | null
      PreSignedUrl?: string | null
      MainImage?: boolean
    }
    PreSignedProductImageTransactionResponse: {
      TransactionId?: string | null
      ProductImages?:
        | components["schemas"]["PreSignedProductImageResponse"][]
        | null
    }
    ProductImageDetails: {
      /** Format: int32 */
      ProductId?: number
      ImageUrls?: components["schemas"]["ProductImage"][] | null
    }
    ImageUrlRequest: {
      ImageUrl: string
      MainImage: boolean
    }
    ProductImageUrlRequest: {
      /** Format: int32 */
      ProductId: number
      ImageUrls: components["schemas"]["ImageUrlRequest"][]
    }
    ProductReferenceCode: {
      /** Format: int32 */
      Id?: number
      /** Format: int32 */
      ProductId?: number
      /** Format: int32 */
      AppId?: number
      ReferenceCode?: string | null
    }
    ProductReferenceCodeCreateRequest: {
      /** Format: int32 */
      ProductId: number
      ReferenceCode: string
    }
    ProductReferenceCodeUpdateRequest: {
      /** Format: int32 */
      Id: number
      ReferenceCode: string
    }
    VariantMapItemCreateRequest: {
      Description: string
    }
    VariantMapCreateRequest: {
      Name: string
      Items?: components["schemas"]["VariantMapItemCreateRequest"][] | null
    }
    VariantItem: {
      /** Format: int32 */
      Id?: number
      /** Format: int32 */
      VariantMapId?: number
      Description?: string | null
    }
    VariantMap: {
      /** Format: int32 */
      Id?: number
      Name?: string | null
      VariantItems?: components["schemas"]["VariantItem"][] | null
    }
    VariantMapItemUpdateRequest: {
      /** Format: int32 */
      Id?: number | null
      Description: string
    }
    VariantMapUpdateRequest: {
      /** Format: int32 */
      Id: number
      Name: string
      Items?: components["schemas"]["VariantMapItemUpdateRequest"][] | null
    }
  }

  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
